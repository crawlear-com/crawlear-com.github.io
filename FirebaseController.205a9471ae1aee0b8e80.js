"use strict";(self.webpackChunkcrawlear_com=self.webpackChunkcrawlear_com||[]).push([[4988],{93094:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n}),s(39653);var a=s(788),i=(s(50090),s(62613),s(69141)),r=s(22405),o=s(14959);const n=class{constructor(e){this.app=e.app,this.provider=e.provider,this.auth=e.auth,this.db=e.db,this.rdb=e.rdb,this.fbBase=e}async userSearch(e,t,s){try{const s=(0,r.rJ)(this.db,"users"),a=(0,r.P)(s,(0,r.My)("displayName"),(0,r.EO)(e),(0,r.AB)(10)),i=await(0,r.GG)(a),o=[];i.forEach((e=>{const t=e.data();o.push({uid:e.id,displayName:t.displayName,photoURL:t.photoURL})})),t&&t(o)}catch(e){s&&s(e)}}async getUser(e,t,s){const a=(0,r.H9)(this.db,"users",e),i=await(0,r.x7)(a);if(i.exists()){const e=i.data();e.uid=a.id,t&&t(e)}else s&&s()}transformGamesIntoData(e){return{name:e.name,uids:e.uids,jids:e.jids,date:e.date,location:e.location,gameType:e.gameType,players:e.players,judges:e.judges||[],isPublic:e.isPublic,maxTime:e.maxTime,maxPoints:e.maxPoints,zones:e.zones,gates:e.gates,gameStatus:e.gameStatus,owner:e.owner,courtesyTime:e.courtesyTime}}transformGamesIntoModel(e){let t=[];return e.forEach((e=>{let s;const i=e.data();i.zones||(i.players.forEach((e=>{e.zones=[{fiascoControlTextValues:[],controlTextValues:[],gateProgression:1,gateProgressionData:[],gatesWithBonification:0,gatesWithFail:0,judgedBy:[],points:e.points,totalPoints:e.points,simpathyPoints:0,time:e.time,handicap:0}],e.totalTime=e.time,e.totalPoints=e.points,e.totalGateProgression=1})),i.gates=[1],i.zones=1),s=new a.Game(i.name,i.date,i.location,i.isPublic,i.gameType,i.players,i.judges||[],i.maxTime,i.maxPoints,i.gates,i.zones,i.gameStatus,i.uids,i.jids,i.owner),s.setGameId(e.id),t.push(s)})),t}async getGamesFromUser(e,t,s,a){try{const a=[],i=(0,r.P)((0,r.rJ)(this.db,"games"),(0,r._M)("uids","array-contains",e),(0,r._M)("gameStatus","<",2));(await(0,r.GG)(i)).docs.forEach((s=>{const i=s.data();(!i.jids||i.jids.indexOf(e)<0)&&(t&&i.isPublic||!t)&&a.push(s)})),s&&s(this.transformGamesIntoModel(a))}catch(e){a&&a()}}async getGamesFromJudge(e,t,s,a){try{const a=[],i=(0,r.P)((0,r.rJ)(this.db,"games"),(0,r._M)("jids","array-contains",e),(0,r._M)("gameStatus","<",2));(await(0,r.GG)(i)).docs.forEach((e=>{const s=e.data();(t&&s.isPublic||!t)&&a.push(e)})),s&&s(this.transformGamesIntoModel(a))}catch(e){a&&a()}}async getFinishedGamesFromUid(e,t,s){try{const s=(0,r.P)((0,r.rJ)(this.db,"games"),(0,r.Uo)((0,r._M)("gameStatus","==",2),(0,r.or)((0,r._M)("uids","array-contains",e),(0,r._M)("jids","array-contains",e)))),a=await(0,r.GG)(s);t&&t(this.transformGamesIntoModel(a.docs))}catch(e){s&&s()}}async setGame(e,t,s){try{const s=await(0,r.gS)((0,r.rJ)(this.db,"games"),this.transformGamesIntoData(e));e.gid=s.id,t&&t(e)}catch(e){s&&s()}}updateGame(e){(0,r.mZ)((0,r.H9)(this.db,"games",e.gid),this.transformGamesIntoData(e))}async removeGame(e){await(0,r.kd)((0,r.H9)(this.db,"games",e)),(0,i.TF)((0,i.KR)(this.rdb,`gameProgression/${e}/`)),(0,i.TF)((0,i.KR)(this.rdb,`presenceRequests/${e}/`))}async removeIdFromGame(e,t,s){const a=(0,r.H9)(this.db,"games",e.gid),i=await(0,r.x7)(a);if(i.exists()){const a=i.data(),o=a[s].indexOf(t);a.gid=i.id,a[s].splice(o,1);const n=this.transformGamesIntoData(a),d={};return d[s]=n[s],n[s]=d[s],(0,r.mZ)((0,r.H9)(this.db,"games",e.gid),d),a}return e}async setGpx(e,t,s){try{if(e.gid)await(0,r.BN)((0,r.H9)(this.db,"gpx",e.gid),{data:e.data}),t&&t(e);else{const s=await(0,r.gS)((0,r.rJ)(this.db,"gpx"),{data:e.data});e.gid=s.id,t&&t(e)}}catch(e){s&&s()}}async getLovedRoutes(e,t,s){try{const s=(0,r.P)((0,r.rJ)(this.db,"routeLove"),(0,r._M)("uid","==",e));(await(0,r.GG)(s)).docs.forEach((async e=>{const s=e.data();await this.fbBase.getRoute(s.rid,!1,(e=>{e.rid=s.rid,t(e)}),(()=>{}))}))}catch(e){s&&s()}}async getRouteLove(e,t,s,a){try{const a=(0,r.P)((0,r.rJ)(this.db,"routeLove"),(0,r._M)("uid","==",e),(0,r._M)("rid","==",t)),i=await(0,r.GG)(a);s&&s(i.docs.length>0,i.docs[0].id)}catch(e){a&&a()}}async loveRoute(e,t,s,a){try{const a=await(0,r.gS)((0,r.rJ)(this.db,"routeLove"),{uid:e,rid:t});s&&s(a.id)}catch(e){a&&a()}}async unloveRoute(e,t,s){try{await(0,r.kd)((0,r.H9)(this.db,"routeLove",e)),t&&t()}catch(e){s&&s()}}async setRoute(e,t,s){this.setGpx(e.gpx,(async a=>{try{const i=e.transformIntoData(a.gid);if(e.rid&&a.gid)await(0,r.BN)((0,r.H9)(this.db,"routes",e.rid),i);else if(a.gid){e.gpx=a.gid,delete e.rid;const t=await(0,r.gS)((0,r.rJ)(this.db,"routes"),i);e.rid=t.id}else s&&s();e.gpx=a,t&&t(e)}catch(e){s&&s()}}),(()=>{s&&s()}))}async getRoutesFromUser(e,t,s){try{const a=[],i=(0,r.P)((0,r.rJ)(this.db,"routes"),(0,r._M)("uids","array-contains",e));(await(0,r.GG)(i)).docs.forEach((e=>{const i=e.data();i.gpx?this.fbBase.getGpx(i.gpx,(s=>{i.gpx=s,i.gpx.gid=s.gid,a.push({...i,rid:e.id}),t&&t(a)}),s):(a.push({...e.data(),rid:e.id}),t&&t(a))}))}catch(e){s&&s()}}async removeRoute(e,t,s,a){t&&await(0,r.kd)((0,r.H9)(this.db,"gpx",t)),await(0,r.kd)((0,r.H9)(this.db,"routes",e)),s&&s()}setUserInContext(e,t){e.instagram=e.instagram||"",window.crawlear={...window.crawlear,user:e},window.crawlear.user.uid=t}logout(){(0,o.xI)().signOut(),window.crawlear.user={}}getUserGameRequests(e,t,s){const a=(0,i.KR)(this.rdb,`gameRequests/${e}`);(0,i._O)(a,(e=>{t(e.key,e.val())})),(0,i.U0)(a,(e=>{s(e.key)}))}getGameProgressionOnce(e,t,s){(0,i.Jt)((0,i.KR)(this.rdb,`gameProgression/${e}`)).then((e=>{t&&t(e.key,e.val())}),s)}getGameProgression(e,t,s,a,r){const o=(0,i.KR)(this.rdb,`gameProgression/${e}`);(0,i._O)(o,(e=>{a(e.key,e.val())})),(0,i.M4)(o,(e=>{r(e.key,e.val())}))}setGameProgression(e,t,s,a,r){(0,i.hZ)((0,i.KR)(this.rdb,`gameProgression/${e}/${s}/${t}/${a}`),r)}removeGameProgression(e){(0,i.TF)((0,i.KR)(this.rdb,`gameProgression/${e}`))}getGameResult(e,t,s){(0,i.Jt)((0,i.KR)(this.rdb,`gameProgression/${e.gid}`)).then((s=>{const a=s.val();Object.entries(a).forEach(((t,s)=>{Object.entries(t[1]).forEach(((t,a)=>{t[1].data&&(e.players[s].zones[a]=t[1].data)}))})),t&&t(e)}),s)}createGameProgression(e){for(let t=0;t<e.players.length;t++)for(let s=0;s<e.zones;s++)this.setGameProgression(e.gid,e.players[t].id,e.players[t].group,s,{status:"waiting",data:{}})}acceptGameRequest(e,t){(0,i.hZ)((0,i.KR)(this.rdb,`gameRequests/${e}/${t}/status/`),"accepted"),(0,i.TF)((0,i.KR)(this.rdb,`gameRequests/${e}/${t}/`))}rejectGameRequest(e,t){(0,i.hZ)((0,i.KR)(this.rdb,`gameRequests/${e}/${t}/status/`),"rejected"),(0,i.TF)((0,i.KR)(this.rdb,`gameRequests/${e}/${t}/`))}setUserGameRequest(e,t,s,a,r){const o=(0,i.VC)((0,i.KR)(this.rdb,`gameRequests/${s}/`),{fromUid:e,fromName:t,toUid:s,gameName:a,date:(new Date).toLocaleDateString(),status:"pending"});(0,i.Zy)(o,(e=>{const t=e.val();t&&r(t,t.status)}))}setDirectorPresenceRequest(e,t,s,a,r){const o=(0,i.VC)((0,i.KR)(this.rdb,`presenceRequests/${e}/`),{zone:t,playerName:s,fromName:a,date:(new Date).toLocaleDateString(),status:"pending"});(0,i.Zy)(o,(e=>{const t=e.val();t&&r(t,e.key)}))}getDirectorPresenceRequest(e,t,s){const a=(0,i.KR)(this.rdb,`presenceRequests/${e}`);(0,i._O)(a,(e=>{t(e.key,e.val())})),(0,i.M4)(a,(e=>{s(e.key,e.val())}))}acceptDirectorPresenceRequest(e,t){(0,i.hZ)((0,i.KR)(this.rdb,`presenceRequests/${e}/${t}/status/`),"accepted")}removeDirectorPresenceRequest(e){(0,i.TF)((0,i.KR)(this.rdb,`presenceRequests/${e}`))}}}}]);